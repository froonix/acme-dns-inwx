#!/usr/bin/env php
<?php
/**********************************************************************
 *                                                                    *
 *                           ACME-DNS-INWX                            *
 * ------------------------------------------------------------------ *
 *                        v0.3.0 (2024-01-30)                         *
 *                                                                    *
 * Author:  Christian Schrötter <cs@fnx.li>                           *
 * License: GNU GENERAL PUBLIC LICENSE (Version 3)                    *
 * Website: https://github.com/froonix/acme-dns-inwx                  *
 *                                                                    *
 **********************************************************************/

set_error_handler('error_handler');
error_reporting(-1);

if(version_compare(PHP_VERSION, '5.5.0', '<'))
{
	throw new Exception('PHP 5.5.0 or newer is required');
}
else if(!extension_loaded('curl') || !extension_loaded('json'))
{
	throw new Exception('Required modules not found: cURL || JSON');
}
else if(PHP_SAPI !== 'cli')
{
	throw new Exception('This script is for CLI execution only');
}

$mode = null;
$base = array_shift($argv);

if(isset($argv[0]) && substr($argv[0], 0, 2) === '--')
{
	$_ = substr(array_shift($argv), 2);
	if(in_array($_, ['add', 'del', 'cleanup', 'export'], true))
	{
		$mode = $_;
	}
	unset($_);
}
else if(isset($argv[1]))
{
	$mode = 'add';
}
else if(isset($argv[0]))
{
	$mode = 'del';
}

if(in_array($mode, ['cleanup', 'export'], true))
{
	$domains = $argv;

	if(!count($domains))
	{
		$mode = null;
	}
}
else
{
	$hostname    = array_shift($argv);
	$recordvalue = array_shift($argv);

	if(count($argv))
	{
		$mode = null;
	}
}

if($mode === null || ($mode === 'add' && ($hostname === null || $recordvalue === null)) || ($mode === 'del' && $hostname === null))
{
	print("[ACME-DNS-INWX] dns-01 challenge helper script for inwx.com DNS-API\n");
	printf("Usage: %s [--{add|del}] <hostname> [<txtvalue>]\n", $base);
	printf("       %s --cleanup <domain> ...\n\n", $base);
	printf("       %s --export <domain> ...\n\n", $base);
	print("_acme-challenge will be prepended to the hostname. Subdomains are fully supported.\n");
	print("Without a txtvalue, the corresponding record will be deleted! TTL is set to 300.\n\n");
	print("There are --add/--del arguments too. They are only supported as first argument!\n");
	print("Calling --del without a txtvalue removes all records for the challenge hostname.\n\n");
	print("It's required to place a file called .inwx.ini in your home directory. Example configuration below:\n\n");
	print("  username   = \"your INWX username\"\n  password   = \"your INWX password\"\n  secret     = \"TOTP shared secret\"\n  persistent = <true|false>\n\n");
	print("secret is optional and only required if your account is protected by 2-factor-authentication.\n\n");
	print("Required:    PHP 5.5 or newer and cURL/JSON extensions.\n");
	print("Recommended: PHP INTL extension for IDN (Punycode) support.\n");
	print("BT & Wiki:   https://github.com/froonix/acme-dns-inwx\n\n");
	print("Usage examples:\n\n");
	print("  # Add TXT record _acme-challenge.example.org with content \"123\"\n");
	printf("  %s example.org 123\n\n", $base);
	print("  # Add TXT record _acme-challenge.example.org with content \"123\"\n");
	printf("  %s --add example.org 123\n\n", $base);
	print("  # Delete TXT record _acme-challenge.example.org with content \"123\"\n");
	printf("  %s --del example.org 123\n\n", $base);
	print("  # Delete all TXT records for _acme-challenge.example.org\n");
	printf("  %s --del example.org\n\n", $base);
	print("  # Delete all TXT records for _acme-challenge.example.org\n");
	printf("  %s example.org\n\n", $base);
	print("  # Delete all challenge records at example.org (incl. subdomains)\n");
	printf("  %s --cleanup example.org\n\n", $base);
	print("  # Create backup of example.org zone\n");
	printf("  %s --export example.org\n\n", $base);
	exit(1);
}

if(!in_array($mode, ['cleanup', 'export']))
{
	$hostname = strtolower($hostname);
	if(substr($hostname, 0, 16) === '_acme-challenge.')
	{
		$hostname = substr($hostname, 16);
	}
}

# TODO: Read path from ENV var?
# ...

$ini = parse_ini_file($_SERVER['HOME'] . '/.inwx.ini');
$ini['secret'] = (!isset($ini['secret'])) ? '' : $ini['secret'];
$ini['persistent'] = (isset($ini['persistent']) && in_array(strtolower($ini['persistent']), ['1', 'true', 'on'], true));

// DON'T MOVE THIS PART INTO THE CLASS!
openlog(strtoupper(basename(__file__)), LOG_PID, LOG_USER);

$inwx = new INWX();
$inwx->setAuthData($ini['username'], $ini['password'], $ini['secret']);
$inwx->setSessionStorage($ini['persistent']);
$inwx->login();

if($mode === 'cleanup')
{
	$deleted = 0;
	foreach($domains as $domain)
	{
		$result = $inwx->getRecord($domain, null, 'TXT');

		if(isset($result['record']) && ($c = count($result['record'])))
		{
			for($i = 0; $i < $c; $i++)
			{
				if(preg_match('/^_acme-challenge(\..+|$)/', $result['record'][$i]['name']))
				{
					printf("Deleting TXT record for %s: %s\n", $result['record'][$i]['name'], $result['record'][$i]['content']);
					$inwx->deleteRecord((int) $result['record'][$i]['id']);
					$deleted++;
				}
			}
		}
	}

	printf("%s%d ACME TXT record(s) deleted!\n", ($deleted ? "\n" : ""), $deleted);
}
else if($mode === 'export')
{
	$i = 0;
	foreach($domains as $domain)
	{
		if($i++)
		{
			printf("\n; %1\$s\n; %1\$s\n\n", str_repeat('-', 70));
		}

		print(trim($inwx->export($domain)) . "\n");
	}
}
else
{
	// Split domain name to subdomains.
	$hostparts = explode('.', $hostname);
	$fulldomain = array_pop($hostparts);
	$recordname = null;

	while(($nextpart = array_pop($hostparts)) !== null)
	{
		$fulldomain = sprintf('%s.%s', $nextpart, $fulldomain);
		if(($domain = $inwx->getDomain($fulldomain, true)) !== false)
		{
			// We found the domain! Prepend challenge name.
			array_unshift($hostparts, '_acme-challenge');
			$recordname = implode('.', $hostparts);
			break;
		}
	}

	if($recordname === null)
	{
		throw new Exception(sprintf('Domain %s does not exist in this account', $hostname));
	}

	if($mode === 'add')
	{
		// We don't care if the record already exists. This is required for ACMEv2!
		$inwx->createRecord($fulldomain, $recordname, 'TXT', $recordvalue, 300);
	}
	else if(($result = $inwx->getRecord($fulldomain, $recordname, 'TXT', $recordvalue, null, true)) && isset($result['record']))
	{
		// One or multiple records found. We can delete all of them.
		$inwx->deleteRecords(array_column($result['record'], 'id'));
	}
}

// Close API...
unset($inwx);

// and quit...
exit(0);

########################################################################
#                            EXTERNAL LIBS                             #
########################################################################

function idn_to_utf8_wrapper($domain)
{
	$domain = (string) $domain;

	if(!function_exists('idn_to_utf8'))
	{
		return $domain;
	}
	else if(defined('INTL_IDNA_VARIANT_UTS46'))
	{
		return idn_to_utf8($domain, IDNA_DEFAULT, INTL_IDNA_VARIANT_UTS46);
	}

	return idn_to_utf8($domain);
}

// Convert PHP errors to exceptions. This is very usefull!
function error_handler($severity, $message, $file, $line)
{
	if(!(error_reporting() & $severity))
	{
		return;
	}

	throw new ErrorException($message, 0, $severity, $file, $line);
}

// Minimal API implementation for INWX
// by Christian Schrötter <cs@fnx.li>
class INWX
{
	private $curl       = null;
	private $username   = null;
	private $password   = null;
	private $secret     = null;
	private $persistent = null;

	public function __construct()
	{
		$this->curl = curl_init();
		$this->initializeOptions();
	}

	public function __destruct()
	{
		try
		{
			if(!$this->persistent)
			{
				$this->logout();
			}
		}
		catch(Exception $e)
		{
			// Ignore all errors, it does not matter.
			// Otherwise we would get strange errors!
		}

		if($this->curl !== null)
		{
			curl_close($this->curl);
			unset($this->curl); # ?
		}
	}

	private function resetSessionStorage()
	{
		$_ = $this->persistent;
		$this->setSessionStorage();

		if($_)
		{
			$this->setSessionStorage(true);
		}
	}

	public function setSessionStorage($_ = false)
	{
		if($this->username === null)
		{
			throw new LogicException(sprintf('Could not set persistent session storage without calling %1$s::setAuthData() before', __class__));
		}

		$this->persistent = sprintf('%s/%s-%s-%u.txt', sys_get_temp_dir(), __class__, md5($this->username), (function_exists('posix_getuid') ? posix_getuid() : 0));

		if($_)
		{
			clearstatcache();

			if(!file_exists($this->persistent))
			{
				if(!touch($this->persistent))
				{
					throw new Exception(sprintf('Could not enable persistent session storage: %s', $this->persistent));
				}
			}

			if(fileperms($this->persistent) !== 0600)
			{
				if(!chmod($this->persistent, 0600))
				{
					throw new Exception(sprintf('Could not enable persistent session storage: %s', $this->persistent));
				}
			}

			$this->setOpt(CURLOPT_COOKIEJAR, $this->persistent);
			$this->setOpt(CURLOPT_COOKIEFILE, $this->persistent);
			$this->setOpt(CURLOPT_COOKIESESSION, false);
		}
		else
		{
			$this->destroySessionStorage();
		}
	}

	private function destroySessionStorage()
	{
		clearstatcache();

		if($this->persistent && file_exists($this->persistent))
		{
			unlink($this->persistent);
		}

		$this->persistent = false;
		$this->setOpt(CURLOPT_COOKIEJAR, '');
		$this->setOpt(CURLOPT_COOKIEFILE, '');
		$this->setOpt(CURLOPT_COOKIESESSION, true);
	}

	public function setAuthData($username, $password, $secret = '')
	{
		$this->username = (string) $username;
		$this->password = (string) $password;
		$this->secret   = (string) $secret;
	}

	private function initializeOptions()
	{
		$this->setOpt(CURLOPT_TIMEOUT, 90);
		$this->setOpt(CURLOPT_RETURNTRANSFER, true);
		$this->setOpt(CURLOPT_SSL_VERIFYPEER, true);
		$this->setOpt(CURLOPT_USERAGENT, sprintf('ACME-DNS-INWX (PHP/%s)', PHP_VERSION));
		$this->setOpt(CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
		$this->setOpt(CURLOPT_URL, 'https://api.domrobot.com/jsonrpc/');
		$this->setOpt(CURLOPT_POST, true);
	}

	private function setOpt($key, $value)
	{
		if(!curl_setopt($this->curl, (string) $key, $value))
		{
			throw new Exception('Could not set cURL option ' . $key);
		}
	}

	public function doRequest($object, $method, $args = [], $return = false)
	{
		// Cleanup args...
		$safe_args = $args;
		unset($safe_args['tan']);
		unset($safe_args['pass']);
		#unset($safe_args['content']);

		// Not required, but maybe usefull to find bugs.
		$args['clTRID'] = sprintf('FNX-%d', getmypid());
		$args['lang']   = 'en';

		// Send action with cleaned arguments to syslog.
		syslog(LOG_INFO, sprintf('%s.%s: %s', $object, $method, json_encode($safe_args)));

		$this->setOpt(CURLOPT_POSTFIELDS, json_encode(['method' => strtolower(sprintf('%s.%s', $object, $method)), 'params' => $args]));

		if(($result = curl_exec($this->curl)) === false)
		{
			throw new RuntimeException(curl_error($this->curl), curl_errno($this->curl));
		}
		else if($result === '')
		{
			throw new RuntimeException('Empty response');
		}
		else if(($result = json_decode($result, true)) === null)
		{
			throw new RuntimeException('Invalid response (NULL)');
		}
		else if($return && $result['code'] === 2303)
		{
			return false;
		}
		else if($result['code'] < 1000 || $result['code'] >= 2000)
		{
			throw new RuntimeException(((isset($result['reason'])) ? sprintf('%s: %s', $result['msg'], $result['reason']) : $result['msg']), $result['code']);
		}
		else if(isset($result['resData']))
		{
			return $result['resData'];
		}
		else
		{
			return null;
		}
	}

	private function logout()
	{
		$this->doRequest('account', 'logout');
		$this->destroySessionStorage();
	}

	public function login()
	{
		clearstatcache();

		if($this->persistent && file_exists($this->persistent) && filesize($this->persistent))
		{
			try
			{
				$this->doRequest('message', 'poll');
				return;
			}
			catch(RuntimeException $e)
			{
				$this->resetSessionStorage();
			}
		}

		$result = $this->doRequest('account', 'login', ['user' => $this->username, 'pass' => $this->password]);

		if($result['tfa'])
		{
			if($this->secret === '')
			{
				throw new Exception('Account ist locked but there is no shared secret');
			}

			for($i = 0; $i < 5; $i++)
			{
				try
				{
					// We can login only once in 30 seconds! So let's retry it 3 times.
					$this->doRequest('account', 'unlock', ['tan' => $this->getTAN()]);
				}
				catch(RuntimeException $e)
				{
					if($i == 2 || $e->getCode() != 2200)
					{
						// Game over!
						throw $e;
					}
					else
					{
						// Retry at next timeblock!
						sleep(mt_rand(30, 60));
						continue;
					}
				}

				// Done!
				break;
			}
		}
	}

	public function export($domain, $return = false)
	{
		$data = $this->doRequest('nameserver', 'export', ['domain' => idn_to_utf8_wrapper($domain)], $return);

		if(isset($data['export']) && is_string($data['export']))
		{
			return $data['export'];
		}

		return null;
	}

	public function getDomain($domain, $return = false)
	{
		return $this->doRequest('domain', 'info', ['domain' => idn_to_utf8_wrapper($domain)], $return);
	}

	public function getRecord($domain, $name = null, $type = null, $content = null, $ttl = null, $return = false)
	{
		$args = ['domain' => idn_to_utf8_wrapper($domain)];

		if(is_string($name))
		{
			$args['name'] = idn_to_utf8_wrapper($name);
		}

		if(is_string($type))
		{
			$args['type'] = $type;
		}

		if(is_string($content))
		{
			$args['content'] = $content;
		}

		if($ttl)
		{
			$args['ttl'] = (int) $ttl;
		}

		try
		{
			return $this->doRequest('nameserver', 'info', $args, $return);
		}
		catch(RuntimeException $e)
		{
			if($e->getCode() !== 2303)
			{
				throw $e;
			}

			return false;
		}
	}

	public function createRecord($domain, $name, $type, $content, $ttl = 3600, $return = false)
	{
		try
		{
			return $this->doRequest('nameserver', 'createRecord', ['domain' => idn_to_utf8_wrapper($domain), 'name' => idn_to_utf8_wrapper($name), 'type' => (string) $type, 'content' => (string) $content, 'ttl' => (int) $ttl], $return);
		}
		catch(RuntimeException $e)
		{
			if($e->getCode() === 2302)
			{
				$result = $this->getRecord($domain, $name, $type, $content, $ttl, true);

				if(isset($result['record'][1]))
				{
					throw new Exception('Too many objects in reply');
				}
				else if(isset($result['record'][0]['id']))
				{
					return ['id' => (int) $result['record'][0]['id']];
				}
			}

			if(!$return)
			{
				throw $e;
			}
		}

		return false;
	}

	public function updateRecord($id, $content, $ttl = 3600, $return = false)
	{
		return $this->doRequest('nameserver', 'updateRecord', ['id' => (int) $id, 'content' => (string) $content, 'ttl' => (int) $ttl], $return);
	}

	public function deleteRecord($id)
	{
		try
		{
			if($this->doRequest('nameserver', 'deleteRecord', ['id' => (int) $id], true) === false)
			{
				return false;
			}
		}
		catch(RuntimeException $e)
		{
			if($e->getCode() !== 2303)
			{
				throw $e;
			}
		}

		return true;
	}

	public function deleteRecords(array $ids)
	{
		$return_value = true;
		$ids = array_values($ids);
		$c = count($ids);

		for($i = 0; $i < $c; $i++)
		{
			if($this->deleteRecord($ids[$i]) === false && $return_value === true)
			{
				$return_value = false;
			}
		}

		return $return_value;
	}

	// TODO: Author/source of this function?
	private function getTAN()
	{
		$secretKey = base32::decode($this->secret);
		$_timeSlice = floor(time() / 30);
		$_codeLength = 6;

		// Pack time into binary string
		$time = chr(0).chr(0).chr(0).chr(0).pack('N*', $_timeSlice);

		// Hash it with users secret key
		$hm = hash_hmac('SHA1', $time, $secretKey, true);

		// Use last nipple of result as index/offset
		$offset = ord(substr($hm, -1)) & 0x0F;

		// grab 4 bytes of the result
		$hashPart = substr($hm, $offset, 4);

		// Unpak binary value
		$value = unpack('N', $hashPart);

		$value = $value[1];

		// Only 32 bits
		$value = $value & 0x7FFFFFFF;
		$modulo = pow(10, $_codeLength);

		return str_pad($value % $modulo, $_codeLength, '0', STR_PAD_LEFT);
	}
}

// Base32 Encode/Decode by Bryan Ruiz <bryan@bryanruiz.com>
// http://php.net/manual/de/function.base-convert.php#102232
abstract class Base32
{
	private static $map =
	[
		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', //  7
		'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', // 15
		'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', // 23
		'Y', 'Z', '2', '3', '4', '5', '6', '7', // 31
		'='  // padding char
	];

	private static $flippedMap =
	[
		'A' =>  '0', 'B' =>  '1', 'C' =>  '2', 'D' =>  '3', 'E' =>  '4', 'F' =>  '5', 'G' =>  '6', 'H' =>  '7',
		'I' =>  '8', 'J' =>  '9', 'K' => '10', 'L' => '11', 'M' => '12', 'N' => '13', 'O' => '14', 'P' => '15',
		'Q' => '16', 'R' => '17', 'S' => '18', 'T' => '19', 'U' => '20', 'V' => '21', 'W' => '22', 'X' => '23',
		'Y' => '24', 'Z' => '25', '2' => '26', '3' => '27', '4' => '28', '5' => '29', '6' => '30', '7' => '31',
	];

	// Use padding false when encoding for urls
	public static function encode($input, $padding = true)
	{
		if(empty($input))
		{
			return '';
		}

		$base32 = '';
		$binaryString = '';

		$input = str_split($input);

		$ci = count($input);
		for($i = 0; $i < $ci; $i++)
		{
			$binaryString .= str_pad(base_convert(ord($input[$i]), 10, 2), 8, '0', STR_PAD_LEFT);
		}

		$fiveBitBinaryArray = str_split($binaryString, 5);

		$i = 0;
		$ci = count($fiveBitBinaryArray);
		while($i < $ci)
		{
			$base32 .= self::$map[base_convert(str_pad($fiveBitBinaryArray[$i], 5, '0'), 2, 10)];
			$i++;
		}

		if($padding && ($x = strlen($binaryString) % 40) != 0)
		{
			switch($x)
			{
				case  8: $base32 .= str_repeat(self::$map[32], 6); break;
				case 16: $base32 .= str_repeat(self::$map[32], 4); break;
				case 24: $base32 .= str_repeat(self::$map[32], 3); break;
				case 32: $base32 .=            self::$map[32];     break;
			}
		}

		return $base32;
	}

	public static function decode($input)
	{
		if(empty($input))
		{
			return;
		}

		$paddingCharCount = substr_count($input, self::$map[32]);
		$allowedValues = [6, 4, 3, 1, 0];

		if(!in_array($paddingCharCount, $allowedValues))
		{
			return false;
		}

		for($i = 0; $i < 4; $i++)
		{
			if($paddingCharCount == $allowedValues[$i] && substr($input, -($allowedValues[$i])) != str_repeat(self::$map[32], $allowedValues[$i]))
			{
				return false;
			}
		}

		$input = str_replace('=', '', $input);
		$input = str_split($input);
		$binaryString = '';

		$ci = count($input);
		for($i = 0; $i < $ci; $i += 8)
		{
			$x = '';
			if(!in_array($input[$i], self::$map))
			{
				return false;
			}

			for($j = 0; $j < 8; $j++)
			{
				$x .= str_pad(base_convert(@self::$flippedMap[@$input[$i + $j]], 10, 2), 5, '0', STR_PAD_LEFT);
			}

			$eightBits = str_split($x, 8);

			$cz = count($eightBits);
			for($z = 0; $z < $cz; $z++)
			{
				$binaryString .= ( ($y = chr(base_convert($eightBits[$z], 2, 10))) || ord($y) == 48 ) ? $y : '';
			}
		}
		return $binaryString;
	}
}

?>
